/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package magicLibrary;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author nbp184
 */
public class EditManaDialog extends javax.swing.JDialog {
    
    private static final String CYCLE = "WUBRG";
    
    public static String[] showDialog(java.awt.Dialog parent, String[] manaCost) {
        EditManaDialog emd = new EditManaDialog(parent, manaCost);
        emd.setVisible(true);
        if(emd.saved) {
            manaCost = emd.getFinalCost();
        }
        emd.dispose();
        return manaCost;
    }
    
    private final ManaTableModel model;
    private boolean saved;
    
    /**
     * Creates new form EditManaDialog
     */
    private EditManaDialog(java.awt.Dialog parent, String[] manaCost) {
        super(parent, true);
        saved = false;
        model = new ManaTableModel(manaCost);
        initComponents();
        setLocationRelativeTo(parent);
        tblColoured.setDefaultRenderer(String.class, new ManaTableCellRenderer());
        tblColoured.setRowHeight(ManaPanel.DOT_SIZE + 1 + 4);
        TableColumn col = tblColoured.getColumnModel().getColumn(1);
        JComboBox cb = new JComboBox();
        cb.addItem("Normal");
        cb.addItem("Hybrid");
        cb.addItem("Phyrexian");
        col.setCellEditor(new DefaultCellEditor(cb));
        for(String m : manaCost) {
            if(!CYCLE.contains(""+m.charAt(0))) {
                spnUntyped.setValue(Integer.parseInt(m));
                break;
            }
        }
    }
    
    private String[] getFinalCost() {
        int untyped = (int)spnUntyped.getValue();
        String[] rv;
        if(untyped == 0 && model.mana.size() == 0) {
            rv = new String[]{"0"};
        } else if(untyped == 0) {
            rv = model.getArray();
        } else if(chkIsX.isSelected()) {
            rv = new String[model.mana.size() + untyped];
            for(int i = 0; i < untyped; i++) {
                rv[i] = "X";
            }
            for(int i = 0; i < model.mana.size(); i++) {
                rv[i+untyped] = model.mana.get(i).toString();
            }
        } else {
            rv = new String[model.mana.size() + 1];
            rv[0] = ""+untyped;
            for(int i = 0; i < model.mana.size(); i++) {
                rv[i+1] = model.mana.get(i).toString();
            }
        }
        return rv;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spnUntyped = new javax.swing.JSpinner();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblColoured = new javax.swing.JTable();
        chkIsX = new javax.swing.JCheckBox();

        setTitle("Edit Mana");

        spnUntyped.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        tblColoured.setModel(model);
        tblColoured.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblColouredMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblColoured);

        chkIsX.setText("Is X");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(spnUntyped, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkIsX))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd)
                    .addComponent(btnDelete))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnUntyped, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkIsX))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSave)
                    .addComponent(btnCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        model.mana.add(new ManaDot(CYCLE.substring(0, 1)));
        model.fireTableRowsInserted(model.mana.size() - 1, model.mana.size() - 1);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if(tblColoured.getSelectedRow() >= 0) {
            model.mana.remove(tblColoured.getSelectedRow());
            model.fireTableRowsDeleted(tblColoured.getSelectedRow(), tblColoured.getSelectedRow());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        saved = true;
        setVisible(false);
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void tblColouredMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblColouredMouseClicked
        int row = tblColoured.rowAtPoint(evt.getPoint());
        int col = tblColoured.columnAtPoint(evt.getPoint());
        if(col == 0 || col == 2) {
            model.setValueAt(null, row, col);
        }
    }//GEN-LAST:event_tblColouredMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JCheckBox chkIsX;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner spnUntyped;
    private javax.swing.JTable tblColoured;
    // End of variables declaration//GEN-END:variables

    private static class ManaDot {
        private char main;
        private boolean phyrexian;
        private char second;
        
        public ManaDot(String mana) {
            main = mana.charAt(0);
            phyrexian = false;
            second = Library.NULL;
            if(mana.length() > 1) {
                if(mana.charAt(1) == 'P') {
                    phyrexian = true;
                } else {
                    second = mana.charAt(1);
                }
            }
        }
        
        void cycleMain() {
            int index = CYCLE.indexOf(main) + 1;
            if(second == Library.NULL) {
                index = index%CYCLE.length();
                main = CYCLE.charAt(index);
            } else {
                index = (index+1)%(CYCLE.length() + 1);
                if(index == 0) {
                    main = '2';
                } else {
                    main = CYCLE.charAt(index - 1);
                }
            }
        }
        
        void cycleSecond() {
            int index = CYCLE.indexOf(second) + 1;
            index = index%CYCLE.length();
            second = CYCLE.charAt(index);
        }
        
        void setHybrid() {
            if(second == Library.NULL) {
                second = CYCLE.charAt(0);
            }
        }
        
        void clearHybrid() {
            second = Library.NULL;
            if(main == '2') {
                main = CYCLE.charAt(0);
            }
        }
        
        @Override
        public String toString() {
            String rv = ""+main;
            if(phyrexian) {
                rv += "P";
            } else if(second != Library.NULL) {
                rv += second;
            }
            return rv;
        }
        
    }
    
    private static class ManaTableModel extends AbstractTableModel {

        private ArrayList<ManaDot> mana;
        
        public ManaTableModel(String[] mana) {
            this.mana = new ArrayList<>();
            for(String m : mana) {
                if(CYCLE.contains(""+m.charAt(0))) {
                    this.mana.add(new ManaDot(m));
                }
            }
        }
        
        @Override
        public int getRowCount() {
            return mana.size();
        }
        
        @Override
        public String getColumnName(int columnIndex) {
            switch(columnIndex) {
                case 0:
                    return "Colour";
                case 1:
                    return "Type";
                case 2:
                    return "Second Colour";
                default:
                    return super.getColumnName(columnIndex);
            }
        }
        
        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch(columnIndex) {
                case 0:
                case 2:
                    return String.class;
                default:
                    return super.getColumnClass(columnIndex);
            }
        }
        
        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 1;
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            ManaDot m = mana.get(rowIndex);
            switch(columnIndex) {
                case 0:
                    return ""+m.main;
                case 1:
                    if(m.phyrexian) {
                        return "Phyrexian";
                    } else if(m.second != Library.NULL) {
                        return "Hybrid";
                    } else {
                        return "Normal";
                    }
                case 2:
                    if(m.second == Library.NULL) {
                        return " ";
                    } else {
                        return ""+m.second;
                    }
                default:
                    return null;
            }
        }
        
        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            ManaDot m = mana.get(rowIndex);
            switch(columnIndex) {
                case 0:
                    m.cycleMain();
                    break;
                case 1:
                    switch(aValue.toString()) {
                        case "Normal":
                            m.phyrexian = false;
                            m.clearHybrid();
                            break;
                        case "Phyrexian":
                            m.phyrexian = true;
                            m.clearHybrid();
                            break;
                        case "Hybrid":
                            m.phyrexian = false;
                            m.setHybrid();
                            break;
                    }
                    break;
                case 2:
                    if(m.second != Library.NULL) {
                        m.cycleSecond();
                    }
                    break;
            }
            this.fireTableRowsUpdated(rowIndex, rowIndex);
        }
        
        public String[] getArray() {
            String[] rv = new String[mana.size()];
            for(int i = 0; i < rv.length; i++) {
                rv[i] = mana.get(i).toString();
            }
            return rv;
        }
        
    }

    private static class ManaTableCellRenderer implements TableCellRenderer {

        private static final Color bg = new Color(57, 105, 138);
        
        private ManaPanel mp;
        
        public ManaTableCellRenderer() {
            mp = new ManaPanel(0, 2);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if(mp.getBorderX() == 0) {
                mp.setBorder((table.getColumnModel().getColumn(column).getWidth() - ManaPanel.DOT_SIZE - 1)/2, 2);
            }
            if(isSelected) {
                mp.setBackground(bg);
            } else {
                mp.setBackground(Color.white);
            }
            mp.setManaCost(new String[]{(String)value});
            return mp;
        }
    }
    
}
