/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package magicLibrary;

import java.awt.BorderLayout;
import java.util.ArrayList;
import javax.swing.AbstractListModel;
import javax.swing.ComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author nbp184
 */
public class DeckPanel extends javax.swing.JPanel {

    private ManaCurvePanel pnlManaCurve;
    private final DeckComboBoxModel model;
    
    /**
     * Creates new form DeckPanel
     */
    public DeckPanel() {
        model = new DeckComboBoxModel();
        initComponents();
        setModels(true, true);
        tblDeck.setRowHeight(ManaPanel.DOT_SIZE + 1 + 4);
        tblDeck.getColumnModel().getColumn(1).setCellRenderer(new ManaTableCellRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbDecks = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDeck = new javax.swing.JTable();
        pnlManaCurveHolder = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCounts = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblSpreads = new javax.swing.JTable();
        lblLand = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstLand = new javax.swing.JList();
        lblTotal = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        cbDecks.setModel(model);
        cbDecks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDecksActionPerformed(evt);
            }
        });

        tblDeck.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblDeck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDeckMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDeck);

        javax.swing.GroupLayout pnlManaCurveHolderLayout = new javax.swing.GroupLayout(pnlManaCurveHolder);
        pnlManaCurveHolder.setLayout(pnlManaCurveHolderLayout);
        pnlManaCurveHolderLayout.setHorizontalGroup(
            pnlManaCurveHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 225, Short.MAX_VALUE)
        );
        pnlManaCurveHolderLayout.setVerticalGroup(
            pnlManaCurveHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 123, Short.MAX_VALUE)
        );

        jLabel1.setText("Mana Curve");

        jLabel2.setText("Colour Counts");

        tblCounts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblCounts);

        jLabel3.setText("Colour Spread");

        tblSpreads.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tblSpreads);

        lblLand.setText("Land");

        lstLand.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstLand.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstLand.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstLandMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(lstLand);

        lblTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotal.setText("jLabel5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbDecks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(lblLand)
                    .addComponent(jScrollPane4)
                    .addComponent(pnlManaCurveHolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbDecks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlManaCurveHolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblLand)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbDecksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDecksActionPerformed
        setModels(false, true);
    }//GEN-LAST:event_cbDecksActionPerformed

    private void lstLandMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstLandMouseClicked
        if(evt.getClickCount() == 2) {
            DeckCardDialog.showDialog(MainFrame.getInstance(), ((Deck.DeckCard)lstLand.getSelectedValue()).card);
        }
    }//GEN-LAST:event_lstLandMouseClicked

    private void tblDeckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDeckMouseClicked
        if(evt.getClickCount() == 2) {
            int row = tblDeck.rowAtPoint(evt.getPoint());
            DeckTableModel m1 = (DeckTableModel)tblDeck.getModel();
            DeckCardDialog.showDialog(MainFrame.getInstance(), Library.getInstance().getCardByName((String)m1.getValueAt(row, 0)));
        }
    }//GEN-LAST:event_tblDeckMouseClicked

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        if(Library.getInstance().hasDecks()) {
            int width = (tblDeck.getWidth() - 250)/2;
            tblDeck.getColumnModel().getColumn(0).setPreferredWidth(width);
            tblDeck.getColumnModel().getColumn(1).setPreferredWidth(width);
            tblDeck.getColumnModel().getColumn(2).setPreferredWidth(50);
            tblDeck.getColumnModel().getColumn(3).setPreferredWidth(150);
            tblDeck.getColumnModel().getColumn(4).setPreferredWidth(50);
        }
    }//GEN-LAST:event_formComponentResized


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbDecks;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblLand;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JList lstLand;
    private javax.swing.JPanel pnlManaCurveHolder;
    private javax.swing.JTable tblCounts;
    private javax.swing.JTable tblDeck;
    private javax.swing.JTable tblSpreads;
    // End of variables declaration//GEN-END:variables

    private void setModels(boolean setting, boolean deckChange) {
        Deck d = (Deck)cbDecks.getSelectedItem();
        if(d != null) {
            ArrayList<Deck.DeckCard> land = new ArrayList<>();
            int cmc;
            int maxCMC = 0;
            for(int i = 0; i < d.size(); i++) {
                cmc = d.get(i).card.getCMC();
                if(cmc > maxCMC) {
                    maxCMC = cmc;
                }
            }
            int[] curve = new int[maxCMC+1];
            int total = 0;
            int totalLand = 0;
            ArrayList<String> countNames = new ArrayList<>();
            ArrayList<Integer> countCounts = new ArrayList<>();
            ArrayList<String> spreadNames = new ArrayList<>();
            ArrayList<Integer> spreadCounts = new ArrayList<>();
            int mana, index;
            String manaName;
            Deck.DeckCard dc;
            for(int i = 0; i < d.size(); i++) {
                dc = d.get(i);
                for(String t : dc.card.type) {
                    if(t.compareToIgnoreCase("land") == 0) {
                        land.add(dc);
                        totalLand += dc.count;
                    }
                }
                cmc = dc.card.getCMC();
                if(cmc > maxCMC) {
                    maxCMC = cmc;
                }
                curve[cmc] += dc.count;
                total += dc.count;
                mana = dc.card.getColours();
                manaName = getManaName(mana);
                if(!manaName.isEmpty()) {
                    if(countNames.contains(manaName)) {
                        index = countNames.indexOf(manaName);
                        countCounts.set(index, countCounts.get(index)+dc.count);
                    } else {
                        countNames.add(manaName);
                        countCounts.add(dc.count);
                    }
                }
                for(String m : dc.card.manaCost) {
                    manaName = getManaName(m);
                    if(!manaName.isEmpty()) {
                        if(spreadNames.contains(manaName)) {
                            index = spreadNames.indexOf(manaName);
                            spreadCounts.set(index, spreadCounts.get(index)+dc.count);
                        } else {
                            spreadNames.add(manaName);
                            spreadCounts.add(dc.count);
                        }
                    }
                }
            }
            lstLand.setListData(land.toArray());
            lblTotal.setText("Total Card Count: " +total +" ");
            lblLand.setText("Land (" +totalLand +")");
            if(setting) {
                DeckTableModel m = new DeckTableModel(d);
                m.addCardCountListener(new CardCountListener() {
                    @Override
                    public void error(String message) {
                        cardCountError(message);
                    }

                    @Override
                    public void removeCard(int row) {
                        removeCardFromDeck(row);
                    }

                    @Override
                    public void updatedCard() {
                        setModels(false, false);
                    }
                });
                tblDeck.setModel(m);
                tblCounts.setModel(new ColourCountModel(countNames, countCounts));
                tblSpreads.setModel(new ColourCountModel(spreadNames, spreadCounts));
                pnlManaCurve = new ManaCurvePanel(curve);
                pnlManaCurveHolder.setLayout(new BorderLayout());
                pnlManaCurveHolder.add(pnlManaCurve, BorderLayout.CENTER);
            } else {
                if(deckChange) {
                    DeckTableModel m1 = (DeckTableModel)tblDeck.getModel();
                    m1.update(d);
                }
                ColourCountModel m2 = (ColourCountModel)tblCounts.getModel();
                m2.update(countNames, countCounts);
                m2 = (ColourCountModel)tblSpreads.getModel();
                m2.update(spreadNames, spreadCounts);
                pnlManaCurve.setCurve(curve);
            }
        }
    }
    
    private String getManaName(int mana) {
        String rv = "";
        if((mana & 1) == 1) {
            if(!rv.isEmpty()) {
                rv += "/";
            }
            rv += "White";
        }
        if((mana & 2) == 2) {
            if(!rv.isEmpty()) {
                rv += "/";
            }
            rv += "Blue";
        }
        if((mana & 4) == 4) {
            if(!rv.isEmpty()) {
                rv += "/";
            }
            rv += "Black";
        }
        if((mana & 8) == 8) {
            if(!rv.isEmpty()) {
                rv += "/";
            }
            rv += "Red";
        }
        if((mana & 16) == 16) {
            if(!rv.isEmpty()) {
                rv += "/";
            }
            rv += "Green";
        }
        return rv;
    }
    
    private String getManaName(String mana) {
        String rv = "";
        for(int i = 0; i < mana.length(); i++) {
            if(!rv.isEmpty() && mana.charAt(i) != 'P') {
                rv += "/";
            }
            switch(mana.charAt(i)) {
                case 'W':
                    rv += "White";
                    break;
                case 'U':
                    rv += "Blue";
                    break;
                case 'B':
                    rv += "Black";
                    break;
                case 'R':
                    rv += "Red";
                    break;
                case 'G':
                    rv += "Green";
                    break;
            }
        }
        return rv;
    }
    
    private void cardCountError(String message) {
        JOptionPane.showMessageDialog(MainFrame.getInstance(), message, "Edit Card Count", JOptionPane.ERROR_MESSAGE);
    }
    
    private void removeCardFromDeck(int row) {
        Deck d = (Deck)cbDecks.getSelectedItem();
        Deck.DeckCard dc = d.get(row);
        int result = JOptionPane.showConfirmDialog(MainFrame.getInstance(), "This will remove " +dc.card.name +" from " +d.name +". Are you sure?", "Edit Card Count", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if(result == JOptionPane.YES_OPTION) {
            d.removeCard(dc.card);
            fireLibraryChanged(true);
        }
    }

    void fireLibraryChanged(boolean cardChange) {
        if(cardChange) {
            setModels(false, false);
        } else {
            model.fireLibraryChanged();
        }
    }
    
    private static class DeckComboBoxModel extends AbstractListModel<Deck> implements ComboBoxModel<Deck> {

        private int selected;
        private Deck nullDeck;
        
        DeckComboBoxModel() {
            selected = 0;
            nullDeck = new Deck("null");
        }
        
        void fireLibraryChanged() {
            this.fireContentsChanged(this, 0, getSize());
        }
        
        @Override
        public int getSize() {
            Library l = Library.getInstance();
            if(l.hasDecks()) {
                return l.deckCount();
            } else {
                return 1;
            }
        }

        @Override
        public Deck getElementAt(int index) {
            Library l = Library.getInstance();
            if(l.hasDecks()) {
                return l.getDeck(index);
            } else {
                return nullDeck;
            }
        }

        @Override
        public void setSelectedItem(Object anItem) {
            Library l = Library.getInstance();
            if(l.hasDecks()) {
                selected = l.getDeckIndex((Deck)anItem);
            } else {
                selected = 0;
            }
        }

        @Override
        public Deck getSelectedItem() {
            Library l = Library.getInstance();
            if(l.hasDecks()) {
                return l.getDeck(selected);
            } else {
                return nullDeck;
            }
        }
               
    }

    private static class DeckTableModel extends AbstractTableModel {
        
        private Deck deck;
        
        public DeckTableModel(Deck deck) {
            this.deck = deck;
        }
        
        public void update(Deck deck) {
            this.deck = deck;
            this.fireTableDataChanged();
        }

        @Override
        public int getRowCount() {
            return deck.size();
        }

        @Override
        public int getColumnCount() {
            return 5;
        }
        
        @Override
        public String getColumnName(int columnIndex) {
            switch(columnIndex) {
                case 0:
                    return "Name";
                case 1:
                    return "Mana";
                case 2:
                    return "CMC";
                case 3:
                    return "Type";
                case 4:
                    return "Count";
                default:
                    return super.getColumnName(columnIndex);
            }
        }
        
        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Deck.DeckCard dc = deck.get(rowIndex);
            switch(columnIndex) {
                case 0:
                    return dc.card.name;
                case 1:
                    return dc.card.manaCost;
                case 2:
                    for(String t : dc.card.type) {
                        if(t.compareToIgnoreCase("land") == 0) {
                            return "";
                        }
                    }
                    return dc.card.getCMC();
                case 3:
                    return dc.card.getTypeString();
                case 4:
                    return dc.count;
                default:
                    return null;
            }
        }
        
        public void addCardCountListener(CardCountListener listener) {
            listenerList.add(CardCountListener.class, listener);
        }
        
        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 4;
        }
        
        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            try {
                int count = Integer.parseInt((String)aValue);
                if(count == 0) {
                    for(CardCountListener listener : listenerList.getListeners(CardCountListener.class)) {
                        listener.removeCard(rowIndex);
                    }
                } else if(count < 0) {
                    for(CardCountListener listener : listenerList.getListeners(CardCountListener.class)) {
                        listener.error("Card count cannot be below zero.");
                    }
                } else {
                    Deck.DeckCard dc = deck.get(rowIndex);
                    dc.count = count;
                    for(CardCountListener listener : listenerList.getListeners(CardCountListener.class)) {
                        listener.updatedCard();
                    }
                }
            } catch(NumberFormatException ex) {
                for(CardCountListener listener : listenerList.getListeners(CardCountListener.class)) {
                    listener.error(aValue +" is not a number.");
                }
            }
        }
        
    }
    
    private static interface CardCountListener extends java.util.EventListener {
        void error(String message);
        void removeCard(int row);
        void updatedCard();
    }
    
    private static class ColourCountModel extends AbstractTableModel {

        private String[] names;
        private Integer[] counts;
       
        ColourCountModel(ArrayList<String> names, ArrayList<Integer> counts) {
            this.names = new String[names.size()];
            names.toArray(this.names);
            this.counts = new Integer[counts.size()];
            counts.toArray(this.counts);
        }
        
        public void update(ArrayList<String> names, ArrayList<Integer> counts) {
            this.names = new String[names.size()];
            names.toArray(this.names);
            this.counts = new Integer[counts.size()];
            counts.toArray(this.counts);
            this.fireTableDataChanged();
        }
        
        @Override
        public int getRowCount() {
            return names.length;
        }

        @Override
        public int getColumnCount() {
            return 2;
        }
        
        @Override
        public String getColumnName(int columnIndex) {
            switch(columnIndex) {
                case 0:
                    return "Colour";
                case 1:
                    return "Count";
                default:
                    return super.getColumnName(columnIndex);
            }
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            switch(columnIndex) {
                case 0:
                    return names[rowIndex];
                case 1:
                    return counts[rowIndex];
                default:
                    return null;
            }
        }
        
    }

}
