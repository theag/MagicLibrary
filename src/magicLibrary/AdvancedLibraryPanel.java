/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package magicLibrary;

import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author nbp184
 */
public class AdvancedLibraryPanel extends LibraryPanel {

    private SearchTableModel model;
        
    /**
     * Creates new form AdvancedLibraryPanel
     */
    public AdvancedLibraryPanel() {
        model = new SearchTableModel();
        initComponents();
        tblCards.setRowHeight(ManaPanel.DOT_SIZE + 1 + 4);
        tblCards.getColumnModel().getColumn(1).setCellRenderer(new ManaTableCellRenderer());
        tblCards.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCardsHeaderMouseClicked(evt);
            }
        });
        btnAndOr.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAndOrActionPerformed(evt);
            }
        });
        btnColourAndOr.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAndOrActionPerformed(evt);
            }
        });
        btnTypeAndOr.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAndOrActionPerformed(evt);
            }
        });
        btnTextAndOr.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAndOrActionPerformed(evt);
            }
        });
        txtDecks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        txtCMC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        btnSimple = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblCards = new javax.swing.JTable();
        lblCount = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        btnAndOr = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        btnColourAndOr = new javax.swing.JToggleButton();
        chkWhite = new javax.swing.JCheckBox();
        chkBlue = new javax.swing.JCheckBox();
        chkRed = new javax.swing.JCheckBox();
        chkGreen = new javax.swing.JCheckBox();
        chkColourless = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        chkLegendary = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        chkArtifact = new javax.swing.JCheckBox();
        chkCreature = new javax.swing.JCheckBox();
        chkEnchantment = new javax.swing.JCheckBox();
        chkInstant = new javax.swing.JCheckBox();
        chkLand = new javax.swing.JCheckBox();
        chkPlaneswalker = new javax.swing.JCheckBox();
        chkSorcery = new javax.swing.JCheckBox();
        btnTypeAndOr = new javax.swing.JToggleButton();
        jLabel4 = new javax.swing.JLabel();
        txtDecks = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnTextAndOr = new javax.swing.JToggleButton();
        jLabel6 = new javax.swing.JLabel();
        btnViewDecks = new javax.swing.JButton();
        txtCMC = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtText = new javax.swing.JTextArea();
        chkBlack = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        btnNotesAndOr = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtNotes = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        cbCount = new javax.swing.JComboBox();
        spnCount = new javax.swing.JSpinner();
        cbAddsMana = new javax.swing.JCheckBox();
        cbNoDeck = new javax.swing.JCheckBox();
        cbNoNotes = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        btnSetsAndOr = new javax.swing.JToggleButton();
        cbNoSets = new javax.swing.JCheckBox();
        txtSets = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jSplitPane1.setDividerLocation(300);

        btnSimple.setText("Simple");
        btnSimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpleActionPerformed(evt);
            }
        });

        tblCards.setModel(model);
        tblCards.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCardsMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblCards);

        lblCount.setText("Count: 0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCount)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSimple)
                .addContainerGap())
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 869, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSimple)
                    .addComponent(lblCount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4))
        );

        jSplitPane1.setRightComponent(jPanel1);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        btnAndOr.setText("And");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Colour");

        btnColourAndOr.setText("And");

        chkWhite.setText("White");

        chkBlue.setText("Blue");

        chkRed.setText("Red");

        chkGreen.setText("Green");

        chkColourless.setText("Colourless");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Supertype");

        chkLegendary.setText("Legendary");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Type");

        chkArtifact.setText("Artifact");

        chkCreature.setText("Creatrue");

        chkEnchantment.setText("Enchantment");

        chkInstant.setText("Instant");

        chkLand.setText("Land");

        chkPlaneswalker.setText("Planeswalker");

        chkSorcery.setText("Sorcery");

        btnTypeAndOr.setText("And");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("CMC");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Rules Text");

        btnTextAndOr.setText("And");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Decks");

        btnViewDecks.setText("View List");
        btnViewDecks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDecksActionPerformed(evt);
            }
        });

        txtText.setColumns(20);
        txtText.setRows(3);
        jScrollPane3.setViewportView(txtText);

        chkBlack.setText("Black");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Notes");

        btnNotesAndOr.setText("And");

        txtNotes.setColumns(20);
        txtNotes.setRows(3);
        jScrollPane1.setViewportView(txtNotes);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Card Count");

        cbCount.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<", "<=", "=", ">=", ">" }));
        cbCount.setSelectedIndex(3);

        spnCount.setModel(new SpinnerNumberModel(0, 0, null, 1));

        cbAddsMana.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cbAddsMana.setText("Adds Mana");
        cbAddsMana.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        cbNoDeck.setText("Not in a deck");

        cbNoNotes.setText("Has no notes");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Sets");

        btnSetsAndOr.setText("And");

        cbNoSets.setText("Has no sets");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDecks)
                    .addComponent(jScrollPane3)
                    .addComponent(txtCMC)
                    .addComponent(txtSets)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkInstant)
                            .addComponent(chkLegendary)
                            .addComponent(btnAndOr)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnColourAndOr))
                            .addComponent(jLabel2)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnTypeAndOr))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkEnchantment)
                                    .addComponent(chkArtifact))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(chkSorcery))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(chkLand))))
                            .addComponent(jLabel4)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnTextAndOr))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(chkCreature)
                                .addGap(22, 22, 22)
                                .addComponent(chkPlaneswalker))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkWhite)
                                    .addComponent(chkRed))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkGreen)
                                    .addComponent(chkBlue))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkBlack)
                                    .addComponent(chkColourless)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNotesAndOr)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbNoNotes))
                            .addComponent(jLabel8)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cbCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnCount, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cbAddsMana)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnViewDecks)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbNoDeck))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSetsAndOr)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbNoSets)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAndOr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnColourAndOr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkWhite)
                    .addComponent(chkBlue)
                    .addComponent(chkBlack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkRed)
                    .addComponent(chkGreen)
                    .addComponent(chkColourless))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkLegendary)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(btnTypeAndOr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkArtifact)
                    .addComponent(chkLand))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkCreature)
                    .addComponent(chkPlaneswalker))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkEnchantment)
                    .addComponent(chkSorcery))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkInstant)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCMC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(btnTextAndOr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(btnViewDecks)
                    .addComponent(cbNoDeck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDecks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(btnNotesAndOr)
                    .addComponent(cbNoNotes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbAddsMana)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(btnSetsAndOr)
                    .addComponent(cbNoSets))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel2);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReset)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(btnReset))
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1175, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSimpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpleActionPerformed
        this.fireChangePanel("Simple");
    }//GEN-LAST:event_btnSimpleActionPerformed

    private void btnViewDecksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDecksActionPerformed
        JOptionPane.showMessageDialog(MainFrame.getInstance(), Library.getInstance().getDeckListString(), "Decks", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnViewDecksActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        AdvancedSearch search = new AdvancedSearch();
        boolean something = false;
        search.allAnd = !btnAndOr.isSelected();
        search.colourAnd = !btnColourAndOr.isSelected();
        if(chkWhite.isSelected()) {
            search.colourMask = search.colourMask + 1;
            something = true;
        }
        if(chkBlue.isSelected()) {
            search.colourMask = search.colourMask + 2;
            something = true;
        }
        if(chkBlack.isSelected()) {
            search.colourMask = search.colourMask + 4;
            something = true;
        }
        if(chkRed.isSelected()) {
            search.colourMask = search.colourMask + 8;
            something = true;
        }
        if(chkGreen.isSelected()) {
            search.colourMask = search.colourMask + 16;
            something = true;
        }
        search.colourless = chkColourless.isSelected();
        something = something | search.colourless;
        search.legendary = chkLegendary.isSelected();
        something = something | search.legendary;
        search.typeAnd = !btnTypeAndOr.isSelected();
        String[] temp = new String[7];
        int count = 0;
        if(chkArtifact.isSelected()) {
            temp[count++] = "Artifact";
        }
        if(chkCreature.isSelected()) {
            temp[count++] = "Creature";
        }
        if(chkEnchantment.isSelected()) {
            temp[count++] = "Enchantment";
        }
        if(chkInstant.isSelected()) {
            temp[count++] = "Instant";
        }
        if(chkLand.isSelected()) {
            temp[count++] = "Land";
        }
        if(chkPlaneswalker.isSelected()) {
            temp[count++] = "Planeswalker";
        }
        if(chkSorcery.isSelected()) {
            temp[count++] = "Sorcery";
        }
        if(count > 0) {
            something = true;
            search.types = new String[count];
            System.arraycopy(temp, 0, search.types, 0, count);
        }
        String value = txtCMC.getText().trim();
        if(!value.isEmpty()) {
            something = true;
            temp = value.split(",");
            search.cmc = new int[temp.length];
            for(int i = 0; i < temp.length; i++) {
                try {
                    search.cmc[i] = Integer.parseInt(temp[i]);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(MainFrame.getInstance(), "CMC must be comma seperated numbers.", "Search", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        }
        search.textAnd = !btnTextAndOr.isSelected();
        value = txtText.getText().trim();
        if(!value.isEmpty()) {
            something = true;
            search.text = value.split("\n");
        }
        if(cbNoDeck.isSelected()) {
            search.noDeck = true;
            something = true;
        } else {
            value = txtDecks.getText().trim();
            if(!value.isEmpty()) {
                something = true;
                String[] deckNames = value.split(",");
                Deck[] foundDecks = new Deck[deckNames.length];
                count = 0;
                Library l = Library.getInstance();
                for(String d : deckNames) {
                    foundDecks[count] = l.getDeckByName(d);
                    if(foundDecks[count] != null) {
                        count++;
                    }
                }
                search.decks = new Deck[count];
                System.arraycopy(foundDecks, 0, search.decks, 0, count);
            }
        }
        if(cbNoNotes.isSelected()) {
            search.noNotes = true;
            something = true;
        } else {
            search.notesAnd = !btnNotesAndOr.isSelected();
            value = txtNotes.getText().trim();
            if(!value.isEmpty()) {
                something = true;
                search.notes = value.split("\n");
            }
        }
        search.countOperator = cbCount.getSelectedIndex();
        search.countNumber = (Integer)spnCount.getValue();
        if(search.countOperator != 3 || search.countNumber != 0) {
            something = true;
        }
        if(cbAddsMana.isSelected()) {
            search.addsMana = true;
            something = true;
        }
        if(cbNoSets.isSelected()) {
            search.noSets = true;
            something = true;
        } else {
            search.setsAnd = !btnSetsAndOr.isSelected();
            value = txtSets.getText().trim();
            if(!value.isEmpty()) {
                something = true;
                search.sets = value.split(",");
            }
        }
        
        if(!something) {
            JOptionPane.showMessageDialog(MainFrame.getInstance(), "You must enter some criteria.", "Search", JOptionPane.ERROR_MESSAGE);
            Library.getInstance().doSearch(""+Library.NULL);
        } else {
            Library.getInstance().doSearch(search);
            if(Library.getInstance().resultSize() == 0) {
                JOptionPane.showMessageDialog(MainFrame.getInstance(), "No results found.", "Search", JOptionPane.WARNING_MESSAGE);
            }
        }
        fireLibraryChanged();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        if(btnAndOr.isSelected()) {
            btnAndOr.setText("And");
        }
        btnAndOr.setSelected(false);
        if(btnColourAndOr.isSelected()) {
            btnColourAndOr.setText("And");
        }
        btnColourAndOr.setSelected(false);
        chkWhite.setSelected(false);
        chkBlue.setSelected(false);
        chkBlack.setSelected(false);
        chkRed.setSelected(false);
        chkGreen.setSelected(false);
        chkColourless.setSelected(false);
        chkLegendary.setSelected(false);
        if(btnTypeAndOr.isSelected()) {
            btnTypeAndOr.setText("And");
        }
        btnTypeAndOr.setSelected(false);
        chkArtifact.setSelected(false);
        chkCreature.setSelected(false);
        chkEnchantment.setSelected(false);
        chkInstant.setSelected(false);
        chkLand.setSelected(false);
        chkPlaneswalker.setSelected(false);
        chkSorcery.setSelected(false);
        txtCMC.setText("");
        if(btnTextAndOr.isSelected()) {
            btnTextAndOr.setText("And");
        }
        btnTextAndOr.setSelected(false);
        txtText.setText("");
        txtDecks.setText("");
        txtNotes.setText("");
        cbCount.setSelectedIndex(3);
        spnCount.setValue(0);
        Library.getInstance().doSearch(""+Library.NULL);
        fireLibraryChanged();
    }//GEN-LAST:event_btnResetActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        tblCards.getColumnModel().getColumn(1).setCellRenderer(new ManaTableCellRenderer());
        int width = (tblCards.getWidth() - 270)/2;
        tblCards.getColumnModel().getColumn(0).setPreferredWidth(width);
        tblCards.getColumnModel().getColumn(1).setPreferredWidth(width);
        tblCards.getColumnModel().getColumn(2).setPreferredWidth(60);
        tblCards.getColumnModel().getColumn(3).setPreferredWidth(150);
        tblCards.getColumnModel().getColumn(4).setPreferredWidth(60);
    }//GEN-LAST:event_formComponentResized

    private void tblCardsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCardsMouseClicked
        if(evt.getClickCount() == 2) {
            int row = tblCards.rowAtPoint(evt.getPoint());
            boolean saved = CardDialog.showEditDialog(MainFrame.getInstance(), true, model.getCardAt(row));
            if(saved) {
                fireLibraryChanged();
                MainFrame.getInstance().updateDecks();
            }
        }
    }//GEN-LAST:event_tblCardsMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnAndOr;
    private javax.swing.JToggleButton btnColourAndOr;
    private javax.swing.JToggleButton btnNotesAndOr;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JToggleButton btnSetsAndOr;
    private javax.swing.JButton btnSimple;
    private javax.swing.JToggleButton btnTextAndOr;
    private javax.swing.JToggleButton btnTypeAndOr;
    private javax.swing.JButton btnViewDecks;
    private javax.swing.JCheckBox cbAddsMana;
    private javax.swing.JComboBox cbCount;
    private javax.swing.JCheckBox cbNoDeck;
    private javax.swing.JCheckBox cbNoNotes;
    private javax.swing.JCheckBox cbNoSets;
    private javax.swing.JCheckBox chkArtifact;
    private javax.swing.JCheckBox chkBlack;
    private javax.swing.JCheckBox chkBlue;
    private javax.swing.JCheckBox chkColourless;
    private javax.swing.JCheckBox chkCreature;
    private javax.swing.JCheckBox chkEnchantment;
    private javax.swing.JCheckBox chkGreen;
    private javax.swing.JCheckBox chkInstant;
    private javax.swing.JCheckBox chkLand;
    private javax.swing.JCheckBox chkLegendary;
    private javax.swing.JCheckBox chkPlaneswalker;
    private javax.swing.JCheckBox chkRed;
    private javax.swing.JCheckBox chkSorcery;
    private javax.swing.JCheckBox chkWhite;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lblCount;
    private javax.swing.JSpinner spnCount;
    private javax.swing.JTable tblCards;
    private javax.swing.JTextField txtCMC;
    private javax.swing.JTextField txtDecks;
    private javax.swing.JTextArea txtNotes;
    private javax.swing.JTextField txtSets;
    private javax.swing.JTextArea txtText;
    // End of variables declaration//GEN-END:variables

    private void tblCardsHeaderMouseClicked(java.awt.event.MouseEvent evt) {
        int col = tblCards.columnAtPoint(evt.getPoint());
        if(col != 1) {
            model.setSort(col);
            tblCards.getColumnModel().getColumn(1).setCellRenderer(new ManaTableCellRenderer());
            int width = (tblCards.getWidth() - 270)/2;
            tblCards.getColumnModel().getColumn(0).setPreferredWidth(width);
            tblCards.getColumnModel().getColumn(1).setPreferredWidth(width);
            tblCards.getColumnModel().getColumn(2).setPreferredWidth(60);
            tblCards.getColumnModel().getColumn(3).setPreferredWidth(150);
            tblCards.getColumnModel().getColumn(4).setPreferredWidth(60);
        }
    }
    
    @Override
    public void fireLibraryChanged() {
        Library.getInstance().redoSesarch();
        model.updateData();
        lblCount.setText("Count: " +Library.getInstance().resultSize());
    }
    
    
    private void btnAndOrActionPerformed(java.awt.event.ActionEvent evt) {
        JToggleButton btn = (JToggleButton)evt.getSource();
        if(btn.isSelected()) {
            btn.setText("Or");
        } else {
            btn.setText("And");
        }
    }
    
}
